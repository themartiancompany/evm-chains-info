#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  input_type=""
  output_type=""
  retrieval_mode=""
  db_path=""
  selection_method=""
  api_key=""
  target_chain=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "jq"
  # _check_cmd \
  #   'evm-contract-call' \
  #   'evm-contract-tools'
  _check_cmd \
    "shuf" \
    "coreutils"
}

_db_path_check() {
  local \
    _db="${1}" \
    _msg=()
  if [[ ! -e "${_db}" ]]; then
    _msg=(
      "Database at"
      "${_db} does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_dequote() {
  _string="${1}"
  echo \
    "${_string:1:-1}"
}

_filter_by_get() {
 local \
   _key="${1}" \
   _value="${2}"
  _filter=(
    ".[] |"
      "select("
        ".${_key} == ${_value} )"
  )
  echo \
    "${_filter[*]}"
}

_filter_get() {
  local \
    _key="${1}" \
    _value="${2}" \
    _output_type="${3}"
  echo \
    "$(_filter_by_get \
         "${_key}" \
         "${_value}").${_output_type}"
}

_filter_rpc_no_api_key_get() {
  local \
    _filter=()
  _filter=(
      ".[] |"
        "select("
          "contains("
            "\"API_KEY\" ) |"
            "not)"
  )
  echo \
    "${_filter[*]}"
}

_rpc_filter_api_key() {
  local \
    _rpcs_string="${1}" \
    _api_key="${2}" \
    _filter
  if [[ "${_api_key}" == "y" ]]; then
    _rpcs=( $( \
      echo \
        "${_rpcs_string}" | \
        jq \
          -c \
          ".[]")
    )
  elif [[ "${_api_key}" == "n" ]]; then
    _filter="$( \
      _filter_rpc_no_api_key_get)"
    readarray -t _rpcs <<< "$( \
      echo \
        "${_rpcs_string}" | \
        jq \
          -c \
          "${_filter}")"
  fi
}

_select() {
  local \
    _selection_method="${1}" \
    _result \
    _results=() \
    _index \
    _length
  shift \
    1
  _results=(
    "$@"
  )
  if [[ "${_selection_method}" == "kirsh" ]]; then
    _index="0"
    _dequote \
      "${_results[${_index}]}"
  elif [[ "${_selection_method}" == "random" ]]; then
    _length="${#_results[@]}"
    _index="$( \
      shuf \
        -i \
          "0-$((${_length} -1))" \
        -n \
          1)"
    _dequote \
      "${_results[${_index}]}"
  elif [[ "${_selection_method}" == "all" ]]; then
    for _result in "${_results[@]}"; do
      _dequote \
        "${_result}"
    done
  fi
}

_rpc_get() {
  local \
    _rpcs_string="${1}" \
    _api_key="${2}" \
    _selection_method="${3}"
  _rpc_filter_api_key \
    "${_rpcs_string}" \
    "${_api_key}"
  _select \
    "${_selection_method}" \
    "${_rpcs[@]}"
}

_explorers_get() {
  local \
    _explorers_string="${1}" \
    _selection_method="${2}" \
    _explorers=() \
    _explorer
  _explorers=( $( \
    echo \
      "${_explorers_string}" | \
      jq \
        ".[].url")
  )
  _select \
    "${_selection_method}" \
    "${_explorers[@]}"
}

_db_get(){
  local \
    _db_path="${1}" \
    _input_type="${2}" \
    _output_type="${3}" \
    _selection_method="${4}" \
    _api_key="${5}" \
    _target_chain="${6}" \
    _filter \
    _rpcs=() \
    _msg=()
  _filter_output_type="${_output_type}"
  if [[ "${_input_type}" == "id" ]]; then
    _filter_key="chainId"
    _filter_value="${_target_chain}"
  elif [[ "${_input_type}" == "name" ]]; then
    _filter_key="name"
    _filter_value="\"${_target_chain}\""
  fi
  if [[ "${_output_type}" == "id" ]]; then
    _filter_output_type="chainId"
  fi
  _filter="$( \
    _filter_get \
      "${_filter_key}" \
      "${_filter_value}" \
      "${_filter_output_type}")"
  if [[ "${quiet}" == "n" ]]; then
    _results_string="$( \
      cat \
        "${_db_path}" | \
        jq \
          "${_filter}")"
  elif [[ "${quiet}" == "y" ]]; then
  _results_string="$( \
    cat \
      "${_db_path}" | \
      jq \
        "${_filter}" 2>/dev/null || \
      true)"
  fi
  if [[ "${_results_string}" == "" ]]; then
    _msg=(
      "found no results for"
      "'${_filter_key}' == '${_filter_value}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_output_type}" == "rpc" ]]; then
    _rpc_get \
      "${_results_string}" \
      "${_api_key}" \
      "${_selection_method}"
  elif [[ "${_output_type}" == "explorers" ]]; then
    _explorers_get \
      "${_results_string}" \
      "${_selection_method}"
  elif [[ "${_output_type}" == "name" ]]; then
  _dequote \
    "${_results_string}"
  elif [[ "${_output_type}" == "id" ]]; then
    echo \
      "${_results_string}"
  fi
}

_evm_chains_info() {
  local \
    _input_type="${1}" \
    _output_type="${2}" \
    _retrieval_mode="${3}" \
    _db_path="${4}" \
    _selection_method="${5}" \
    _api_key="${6}" \
    _target_chain="${7}"
  shift \
    7
  _opts+=(
    "$@"
  )
  if [[ "${_retrieval_mode}" == "offline" ]]; then
    _db_path_check \
      "${_db_path}"
    _db_get \
      "${_db_path}" \
      "${_input_type}" \
      "${_output_type}" \
      "${_selection_method}" \
      "${_api_key}" \
      "${_target_chain}"
  elif [[ "${_retrieval_mode}" != "offline" ]]; then
    _msg=(
      "unknown retrieval mode '${_retrieval_mode}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_db_path_auto_detect() {
  local \
    _lib \
    _chains \
    _db \
    _db_user \
    _msg=()
  _lib="$( \
    _get_lib)"
  _chains="evm-chains/chains.json"
  _db="${_lib}/${_chains}"
  if [[ ! -e "${_db}" ]]; then
    _db_user="${HOME}/.config/${_chains}"
    _msg=(
      "System database '${_db}'"
      "not found, trying '${_db_user}'"
    )
    _msg_info \
      "${_msg[*]}"
    if [[ ! -e "${_db_user}" ]]; then
     _msg=(
       "User database '${_db_user}'"
       "not found too!'"
     )
    _msg_error \
      "${_msg[*]}" \
      1
    fi
    _db="${_db_user}"
  fi
  _set_override \
   "db" \
   "path" \
   "${_db}"
}

_input_type_auto_detect() {
  local \
    _chain
  _chain="${target_chain}"
  _number='^[0-9]+$'
  if [[ "${_chain}" =~ ${_number} ]] ; then
    _input_type="id"
  elif [[ ! "${_chain}" =~ "${_number}" ]] ; then
    _input_type="name"
  fi
  _set_override \
    "input" \
    "type" \
    "${_input_type}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _input_type_auto_detect
  _set_override \
    "output" \
    "type" \
    "name"
  _set_override \
    "retrieval" \
    "mode" \
    "offline"
  _set_override \
    "selection" \
    "method" \
    "kirsh"
  _set_override \
    "api" \
    "key" \
    "n"
  _db_path_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns info about EVM blockchains.

Usage:
  $(_get "app" "name")
    [options]
    <target_chain>

  options:
     -i <input_type>        Input type. It can be 'id' or 'name'.
                            Default: '${input_type}"'
     -o <output_type>       Output type. It can be 'id', 'name',
                            'rpc', 'explorers'.
                            Default: '${output_type}'
     -m <retrieval_mode>    It can be 'offline'.
                            Default: '${retrieval_mode}'
     -d <db_path>           Path of the chains' info json file
                            to be used for 'offline' retrieval
                            mode.
                            Default: '${db_path}'
     -s <selection_method>  When output type is 'rpc', 
                            selection criterion to use when
                            more than one is available.
                            It can be 'kirsh', 'random' or
                            'all'.
                            Default: '${selection_method}'
     -k                     Whether to include, when output type
                            is 'rpc', the ones requiring an api key.
                            Default: '${api_key}'

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   ${get_date}"
  _msg_info "               Input type:   ${input_type}"
  _msg_info "              Output type:   ${output_type}"
  _msg_info "           Retrieval mode:   ${retrieval_mode}"
  _msg_info "            Database path:   ${db_path}"
  _msg_info "                  API Key:   ${api_key}"
  _msg_info "     RPC selection method:   ${selection_method}"
  _msg_info "             Target chain:   ${target_chain}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'i:o:m:d:s:kcvh?' \
    arg; do
  case \
    "${arg}" in
    i) override_input_type="${OPTARG}" ;;
    o) override_output_type="${OPTARG}" ;;
    m) override_retrieval_mode="${OPTARG}" ;;
    d) override_db_path="${OPTARG}" ;;
    s) override_selection_method="${OPTARG}" ;;
    k) override_api_key="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1)); then
  _msg_error \
    "no chain identifier given", \
    0
  _set_overrides
  _usage \
    1
fi
_set \
  "target" \
  "chain" \
  "${1}"
_set_overrides
_show_config
app_opts=(
  "${input_type}"
  "${output_type}"
  "${retrieval_mode}"
  "${db_path}"
  "${selection_method}"
  "${api_key}"
  "${target_chain}"
)
_evm_chains_info \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
