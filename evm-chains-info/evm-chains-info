#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  get_date=""
  input_type=""
  output_type=""
  retrieval_mode=""
  db_path=""
  target_chain=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "jq"
  _check_cmd \
    'evm-contract-call' \
    'evm-contract-tools'
}

_db_path_check() {
  local \
    _db="${1}" \
    _msg=()
  if [[ ! -e "${_db}" ]]; then
    _msg=(
      "Database at"
      "${_db} does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_db_get(){
    _db_path="${1}" \
    _input_type="${2}" \
    _output_type="${3}" \
    _target_chain="${4}"
  echo "ciao jq"
}

_evm_chains_info() {
  local \
    _input_type="${1}" \
    _output_type="${2}" \
    _retrieval_mode="${3}" \
    _db_path="${4}" \
    _target_chain="${5}"
  shift \
    5
  _opts+=(
    "$@"
  )
  if [[ "${_retrieval_mode}" == "offline" ]]; then
    _db_path_check \
      "${_db_path}"
    _db_get \
      "${_db_path}" \
      "${_input_type}" \
      "${_output_type}" \
      "${_target_chain}"
  elif [[ "${_retrieval_mode}" != "offline" ]]; then
    _msg=(
      "unknown retrieval mode '${_retrieval_mode}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_db_path_auto_detect() {
  local \
    _lib \
    _chains \
    _db \
    _db_user \
    _msg=()
  _lib="$( \
    _get_lib)"
  _chains="evm-chains/chains.json"
  _db="${_lib}/${_chains}"
  if [[ ! -e "${_db}" ]]; then
    _msg=(
      "System database '${_db}'"
      "not found, trying '${_db_user}'"
    )
    _msg_info \
      "${_msg[*]}"
    _db_user="${HOME}/.config/${_chains}"
    if [[ ! -e "${_db_user}" ]]; then
     _msg=(
       "User database '${_db_user}'"
       "not found too!'"
     )
    _msg_error \
      "${_msg[*]}" \
      1
    fi
    _db="${_db_user}"
  fi
  _set_override \
   "db" \
   "path" \
   "${_db}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "get" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "input" \
    "type" \
    "id"
  _set_override \
    "output" \
    "type" \
    "name"
  _set_override \
    "retrieval" \
    "mode" \
    "offline"
  _db_path_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns info about EVM blockchains.

Usage:
  $(_get "app" "name")
    [options]
    <target_chain]

  options:
     -i <input_type>      Input type. It can be 'id' or 'name'
                          Default: '$(_get "input" "type")'
     -o <output_type>     Output type. It can be 'id', 'name'
                          or 'rpc'.
                          Default: '$(_get "output" "type")'
     -m <retrieval_mode>  It can be 'offline'.
                          Default: '$(_get "evm" "version")'
     -d <db_path>         Path of the chains' info json file
                          to be used for 'offline' retrieval
                          mode.
                          Default: '$(_get "db" "path")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Get date:   $(_get "get" "date")"
  _msg_info "               Input type:   $(_get "input" "type")"
  _msg_info "              Output type:   $(_get "output" "type")"
  _msg_info "           Retrieval mode:   $(_get "retrieval" "mode")"
  _msg_info "            Database path:   $(_get "db" "path")"
  _msg_info "             Target chain:   $(_get "target" "chain")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'i:o:m:d:cvh?' \
    arg; do
  case \
    "${arg}" in
    i) override_input_type="${OPTARG}" ;;
    o) override_output_type="${OPTARG}" ;;
    m) override_retrieval_mode="${OPTARG}" ;;
    d) override_db_path="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1)); then
  _msg_error \
    "no chain identifier given", \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$(_get \
       "input" \
       "type")"
  "$(_get \
       "output" \
       "type")"
  "$(_get \
       "retrieval" \
       "mode")"
  "$(_get \
       "db" \
       "path")"
  "$(_get \
       "target" \
       "chain")"
)
_evm_chains_info \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
